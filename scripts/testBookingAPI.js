const axios = require('axios');

const API_URL = 'https://backendmanage-7nxn.onrender.com/api';

async function testBookingAPI() {
  try {
    console.log('üß™ Test de l\'API de r√©servation...');

    // 1. Test de connexion
    console.log('1Ô∏è‚É£ Test de connexion √† l\'API...');
    const healthCheck = await axios.get(`${API_URL}/rooms`);
    console.log('‚úÖ API accessible, chambres trouv√©es:', healthCheck.data.length);

    // 2. Test de cr√©ation de r√©servation sans token (doit √©chouer)
    console.log('\n2Ô∏è‚É£ Test de cr√©ation sans token (doit √©chouer)...');
    try {
      const bookingData = {
        roomId: '6844ff635b60779b7ac4eab1',
        checkIn: '2024-01-15',
        checkOut: '2024-01-17',
        guests: {
          adults: 2,
          children: 0
        }
      };

      await axios.post(`${API_URL}/bookings`, bookingData);
      console.log('‚ùå Erreur: La r√©servation a r√©ussi sans token');
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('‚úÖ Correct: Erreur 401 - Token requis');
      } else {
        console.log('‚ö†Ô∏è Erreur inattendue:', error.response?.status, error.response?.data);
      }
    }

    // 3. Test de r√©cup√©ration des r√©servations sans token
    console.log('\n3Ô∏è‚É£ Test de r√©cup√©ration des r√©servations sans token...');
    try {
      await axios.get(`${API_URL}/bookings/my-bookings`);
      console.log('‚ùå Erreur: R√©cup√©ration r√©ussie sans token');
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('‚úÖ Correct: Erreur 401 - Token requis');
      } else if (error.response?.status === 404) {
        console.log('‚ö†Ô∏è Erreur 404 - Route non trouv√©e');
      } else {
        console.log('‚ö†Ô∏è Erreur inattendue:', error.response?.status, error.response?.data);
      }
    }

    // 4. Test de la route de r√©servations
    console.log('\n4Ô∏è‚É£ Test de la route /bookings...');
    try {
      await axios.get(`${API_URL}/bookings`);
      console.log('‚ùå Erreur: Route /bookings accessible sans token');
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('‚úÖ Correct: Route prot√©g√©e');
      } else {
        console.log('‚ö†Ô∏è Erreur inattendue:', error.response?.status, error.response?.data);
      }
    }

    console.log('\nüéØ R√©sum√© des tests:');
    console.log('- API accessible: ‚úÖ');
    console.log('- Routes prot√©g√©es: ‚úÖ');
    console.log('- Structure des donn√©es: √Ä v√©rifier avec token');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
  }
}

// Ex√©cuter le test
testBookingAPI(); 